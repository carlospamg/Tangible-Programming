package python;

import java.io.PrintWriter;
import java.util.Stack;

import ast.Command;
import ast.LiteralNumber;
import ast.Loop;
import ast.Program;
import ast.Statement;
import ast.Visitor;

public class PythonGenerator implements Visitor{

	/**
	 * Project Stack. Stores variables and resolved sub branches of the AST
	 */
	private final Stack<Object> results = new Stack<Object>();


	/**
	 * Indentation counter to make the output more readable
	 */
	private int indentCnt = 0;
	
	/**
	 * Name of the python file to generate
	 */
	private String filename;
	
	/**
	 * File writer for the source file
	 */
	private PrintWriter writer;

	public PythonGenerator(String fileName){
		this.filename = fileName;
	}
	
	@Override
	public void visit(LiteralNumber number) {
		results.push(number.value);
	}

	@Override
	public void visit(Command cmd) {
		System.out.println(getIndentation() + cmd.name + "()");
	}

	@Override
	public void visit(Loop loop) {
		int counter = (Integer)results.pop();
		System.out.println(getIndentation() + "for x in range(0, " + counter + "):");

		indentCnt++;
		
		for(Statement s : loop.statements){
			s.acceptInOrder(this);
		}

		indentCnt--;
	}

	@Override
	public void visit(Program program) {

	}

	private String getIndentation(){
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < indentCnt; i++){
			sb.append("\t");
		}
		return sb.toString();
	}

}

package communication;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.UUID;
import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import javax.microedition.io.StreamConnectionNotifier;

import ast.Command;

public class BluetoothTransmitter implements ITransmitter{

	public final UUID uuid = new UUID("1101", false);

	public final String name = "Window Echo Server";

	public final String url = "btspp://localhost:" + uuid + ";name=" + name + ";authenticate=false;encrypt=false;";

	LocalDevice local = null;

	StreamConnectionNotifier server = null;

	StreamConnection conn = null;

	BufferedReader reader = null;

	DataOutputStream writer = null;

	Thread readerMonitor = null;
	
	boolean readerMonitorRunning = true;
	
	boolean acknowledgementReceived = false;

	CommunicationState state;
	
	@Override
	public void setup() {
		try{

			System.out.println("Setting device to be discoverable...");
			local = LocalDevice.getLocalDevice();
			local.setDiscoverable(DiscoveryAgent.GIAC);

			System.out.println("Start advertising service...");

			server = (StreamConnectionNotifier)Connector.open(url);

			System.out.println("Waiting for incoming connection...");

			conn = server.acceptAndOpen();

			System.out.println("Client Connected... ");

			reader = new BufferedReader(new InputStreamReader(conn.openInputStream()));

			writer = conn.openDataOutputStream();
			
			// Start reader thread monitor
			readerMonitor = new Thread(new Runnable() {

				@Override
				public void run() {
					while(readerMonitorRunning){
						try {
							if(reader.ready()){
								final String line = reader.readLine();
								if(line.equals(0xFE)){
									System.out.println(">> Receiving: " + line);
								}
							}
						} catch (IOException e) {
							e.printStackTrace();
						}

					}

					try {
						reader.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			});
			
			readerMonitor.start();

		}catch(Exception e){
			e.printStackTrace();
		}
	}

	@Override
	public void sendCommand(Command cmd) {
		try {
			writer.write(cmd.outputId);
			writer.write('\n');
			
			while(state == CommunicationState.RECEIVE_ACK_1 || state == CommunicationState.RECEIVE_ACK_2){
				Thread.sleep(50);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void shutdown() {
		if(writer != null){
			try {
				writer.write('e');
				writer.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		try {
			readerMonitor.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
